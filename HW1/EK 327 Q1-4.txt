Q1

mov r0,9
mov r1,10
mov r2, 20
loop: inc r0
inc r1
mov [r0],r1
cmp r1,r2
jne loop
mov r1,[r0]
inc r1
inc r1
mov [r0],r1

halt








Q2



test:
mov r0,1

mov r1,3

mov r2,2
mov r3,2

mov r4,1
mov [r0],r1

inc r0

mov [r0],r2
inc r0

mov [r0],r3
inc r0
mov [r0],r4


mov r0,1

mov r1,[r0]

inc r0
mov r2,[r0]

inc r0
mov r3,[r0]
inc r0
mov r4,[r0]
mov r5,[r0]
sub r2,r3
mov r3,0

cmp r2,r3
je case_0

inc r3

cmp r2,r3
je case_1
multiply: add r4,r5
inc r3

cmp r2,r3
jne multiply
case_1: add r1,r4

case_0: mov r0,30
mov [r0],r1

halt







Q3

test
mov r0,1
mov r1,4
mov r2,3
mov [r0],r1
inc r0
mov [r0],r2



mov r0,1
mov r1,[r0]
mov r3,[r0]
inc r0
mov r2,[r0]
mov r0,0
cmp r0,r2
je case_m_0
cmp r0,r1
je end
inc r0
cmp r0,r2
je end
cmp r0,r1
je end
power_loop: inc r0
mov r4,r3
mov r5,1
add_loop: inc r5
add r3,r4
cmp r5,r1
jne add_loop
cmp r0,r2
jne power_loop
end: mov r0,30
mov [r0],r3
jmp force_halt
case_m_0: mov r3,1
jmp end
force_halt: halt





Q4


test








mov r0,24
mov r1,55
mov r2,10
mov [r2],r1
mov r2,9
mov [r2],r0


mov r0,9
mov r1,1
loop: inc r0
mov r2,[r0]
sub r0,r1
mov r3,[r0]
add r2,r3
sub r0,r1
mov [r0],r2
cmp r0,r1
jne loop

halt


